version: '3.6'
services:
  mysql:
    platform: linux/arm64/v8
    container_name: mysql-todo
    image: "mysql:latest"
    volumes:
      - "./mysqldata:/var/lib/mysql/"
    env_file:
      - ./docker/.env
    ports:
      - "${DOCKER_MYSQL_PORT:-3307}:3306"
    networks:
      - todo_api_network
  postgres:
    platform: linux/amd64
    container_name: postgres-todo
    image: postgres:14.1-alpine
    volumes:
      - "./postgresdata:/var/lib/postgresql/data"
    env_file:
      - ./docker/.env
    ports:
      - "${DOCKER_POSTGRES_PORT:-5433}:5432"
    networks:
      - todo_api_network

  redis:
    platform: linux/amd64
    container_name: redis-todo
    image: "redis:6-alpine3.17"
    ports:
      - "${DOCKER_REDIS_PORT:-6379}:3306"
    networks:
      - todo_api_network
  memcache:
    platform: linux/amd64
    container_name: memcache-todo
    image: "memcached:alpine3.17"
    ports:
      - "${DOCKER_MEMCACHE_PORT:-11211}:11211"
    networks:
      - todo_api_network

  app:
    platform: linux/amd64
    container_name: app-todo
    build:
      context: .
      dockerfile: "./docker/go/Dockerfile"
    env_file:
      - .env
    depends_on:
      - mysql
      - postgres
      - redis
      - memcache
    restart: on-failure
    volumes:
      - .:/app
    ports:
      - "${DOCKER_APP_PORT:-3000}:3000"
    networks:
      - todo_api_network

networks:
  todo_api_network:

# version: '3.6'
# services:
#   mysql:
#     platform: linux/arm64/v8
#     container_name: mysql-todo
#     image: "mysql:latest"
#     volumes:
#       - "./mysqldata:/var/lib/mysql/"
#     env_file:
#       - ./docker/.env
#     ports:
#       - "${DOCKER_MYSQL_PORT:-3307}:3306"
#     networks:
#       - todo_api_network

#   postgres:
#     platform: linux/amd64
#     container_name: postgres-todo
#     image: postgres:14.1-alpine
#     volumes:
#       - "./postgresdata:/var/lib/postgresql/data"
#     env_file:
#       - ./docker/.env
#     ports:
#       - "${DOCKER_POSTGRES_PORT:-5433}:5432"
#     networks:
#       - todo_api_network

#   redis:
#     platform: linux/amd64
#     container_name: redis-todo
#     image: "redis:6-alpine3.17"
#     ports:
#       - "${DOCKER_REDIS_PORT:-6379}:3306"
#     networks:
#       - todo_api_network

#   memcache:
#     platform: linux/amd64
#     container_name: memcache-todo
#     image: "memcached:alpine3.17"
#     ports:
#       - "${DOCKER_MEMCACHE_PORT:-11211}:11211"
#     networks:
#       - todo_api_network

#   setup_es:
#     platform: linux/amd64
#     container_name: setup_es-todo
#     image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
#     volumes:
#       - "./certs:/usr/share/elasticsearch/config/certs"
#     user: "0"
#     command: >
#       bash -c '
#         # if [ x${ELASTICSEARCH_PASSWORD} == x ]; then
#         #   echo "Set the ELASTICSEARCH_PASSWORD environment variable in the .env file";
#         #   exit 1;
#         # elif [ x${KIBANA_PASSWORD} == x ]; then
#         #   echo "Set the KIBANA_PASSWORD environment variable in the .env file";
#         #   exit 1;
#         # fi;
#         if [ ! -f config/certs/ca.zip ]; then
#           echo "Creating CA";
#           bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
#           unzip config/certs/ca.zip -d config/certs;
#         fi;
#         if [ ! -f config/certs/certs.zip ]; then
#           echo "Creating certs";
#           echo -ne \
#           "instances:\n"\
#           "  - name: es01\n"\
#           "    dns:\n"\
#           "      - es01\n"\
#           "      - localhost\n"\
#           "    ip:\n"\
#           "      - 127.0.0.1\n"\
#           "  - name: es02\n"\
#           "    dns:\n"\
#           "      - es02\n"\
#           "      - localhost\n"\
#           "    ip:\n"\
#           "      - 127.0.0.1\n"\
#           "  - name: es03\n"\
#           "    dns:\n"\
#           "      - es03\n"\
#           "      - localhost\n"\
#           "    ip:\n"\
#           "      - 127.0.0.1\n"\
#           > config/certs/instances.yml;
#           bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
#           unzip config/certs/certs.zip -d config/certs;
#         fi;
#         echo "Setting file permissions"
#         chown -R root:root config/certs;
#         find . -type d -exec chmod 750 \{\} \;;
#         find . -type f -exec chmod 640 \{\} \;;
#         echo "Waiting for Elasticsearch availability";
#         until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
#         echo "Setting kibana_system password";
#         until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTICSEARCH_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
#         echo "All done!";
#       '
#     healthcheck:
#       test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
#       interval: 1s
#       timeout: 5s
#       retries: 120

#   es01:
#     platform: linux/amd64
#     container_name: es01-todo
#     image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
#     volumes:
#       - "./certs:/usr/share/elasticsearch/config/certs"
#       - "./esdata01:/usr/share/elasticsearch/data"
#     ports:
#       - ${DOCKER_ELASTICSEARCH_PORT}:9200
#     environment:
#       - node.name=es01
#       - cluster.name=${ELASTICSEARCH_CLUSTER_NAME}
#       - cluster.initial_master_nodes=es01,es02,es03
#       - discovery.seed_hosts=es02,es03
#       - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
#       - bootstrap.memory_lock=true
#       - xpack.security.enabled=true
#       - xpack.security.http.ssl.enabled=true
#       - xpack.security.http.ssl.key=certs/es01/es01.key
#       - xpack.security.http.ssl.certificate=certs/es01/es01.crt
#       - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.transport.ssl.enabled=true
#       - xpack.security.transport.ssl.key=certs/es01/es01.key
#       - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
#       - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.transport.ssl.verification_mode=certificate
#       - xpack.license.self_generated.type=${ELASTICSEARCH_LICENSE}
#     depends_on:
#       setup_es:
#         condition: service_healthy
#     mem_limit: ${ELASTICSEARCH_MEM_LIMIT}
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     healthcheck:
#       test:
#         [
#           "CMD-SHELL",
#           "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 120
#     networks:
#       - todo_api_network

#   es02:
#     platform: linux/amd64
#     container_name: es02-todo
#     image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
#     volumes:
#       - "./certs:/usr/share/elasticsearch/config/certs"
#       - "./esdata02:/usr/share/elasticsearch/data"
#     environment:
#       - node.name=es02
#       - cluster.name=${ELASTICSEARCH_CLUSTER_NAME}
#       - cluster.initial_master_nodes=es01,es02,es03
#       - discovery.seed_hosts=es01,es03
#       - bootstrap.memory_lock=true
#       - xpack.security.enabled=true
#       - xpack.security.http.ssl.enabled=true
#       - xpack.security.http.ssl.key=certs/es02/es02.key
#       - xpack.security.http.ssl.certificate=certs/es02/es02.crt
#       - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.transport.ssl.enabled=true
#       - xpack.security.transport.ssl.key=certs/es02/es02.key
#       - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
#       - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.transport.ssl.verification_mode=certificate
#       - xpack.license.self_generated.type=${ELASTICSEARCH_LICENSE}
#     depends_on:
#       - es01
#     mem_limit: ${ELASTICSEARCH_MEM_LIMIT}
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     healthcheck:
#       test:
#         [
#           "CMD-SHELL",
#           "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 120
#     networks:
#       - todo_api_network

#   es03:
#     platform: linux/amd64
#     container_name: es03-todo
#     image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
#     volumes:
#       - "./certs:/usr/share/elasticsearch/config/certs"
#       - "./esdata03:/usr/share/elasticsearch/data"
#     environment:
#       - node.name=es03
#       - cluster.name=${ELASTICSEARCH_CLUSTER_NAME}
#       - cluster.initial_master_nodes=es01,es02,es03
#       - discovery.seed_hosts=es01,es02
#       - bootstrap.memory_lock=true
#       - xpack.security.enabled=true
#       - xpack.security.http.ssl.enabled=true
#       - xpack.security.http.ssl.key=certs/es03/es03.key
#       - xpack.security.http.ssl.certificate=certs/es03/es03.crt
#       - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.transport.ssl.enabled=true
#       - xpack.security.transport.ssl.key=certs/es03/es03.key
#       - xpack.security.transport.ssl.certificate=certs/es03/es03.crt
#       - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.transport.ssl.verification_mode=certificate
#       - xpack.license.self_generated.type=${ELASTICSEARCH_LICENSE}
#     depends_on:
#       - es02
#     mem_limit: ${ELASTICSEARCH_MEM_LIMIT}
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     healthcheck:
#       test:
#         [
#           "CMD-SHELL",
#           "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 120
#     networks:
#       - todo_api_network

#   kibana:
#     platform: linux/amd64
#     container_name: kibana-todo
#     image: docker.elastic.co/kibana/kibana:8.7.0
#     volumes:
#       - "./certs:/usr/share/kibana/config/certs"
#       - "./kibanadata:/usr/share/kibana/data"
#     depends_on:
#       es01:
#         condition: service_healthy
#       es02:
#         condition: service_healthy
#       es03:
#         condition: service_healthy
#     ports:
#       - "${DOCKER_KIBANA_PORT:-5601}:5601"
#     env_file:
#       - ./docker/.env
#     mem_limit: ${ELASTICSEARCH_MEM_LIMIT}
#     healthcheck:
#       test:
#         [
#           "CMD-SHELL",
#           "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 120
#     networks:
#       - todo_api_network

#   app:
#     platform: linux/amd64
#     container_name: app-todo
#     build:
#       context: .
#       dockerfile: "./docker/go/Dockerfile"
#     env_file:
#       - .env
#     depends_on:
#       - mysql
#       - postgres
#       - redis
#       - memcache
#       - es01
#     restart: on-failure
#     volumes:
#       - .:/app
#     ports:
#       - "${DOCKER_APP_PORT:-3000}:3000"
#     networks:
#       - todo_api_network

# networks:
#   todo_api_network:
